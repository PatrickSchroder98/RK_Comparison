class FehlbergRungeKutta:
    """This class contains Fehlberg-Runge-Kutta methods of orders from 5 to 7. Work in progress on 8th order"""

    def fehlbergrungekutta5(self, f, x, y1, n, h):
        """Fehlberg-Runge-Kutta order 5, source: [5] in in bibliography"""
        for i in range(n):
            k1 = h * f(x[i], y1[i])
            k2 = h * f(x[i] + (1.0 / 6.0) * h, y1[i] + (1.0 / 6.0) * k1)
            k3 = h * f(
                x[i] + (4.0 / 15.0) * h, y1[i] + (4.0 / 75.0) * k1 + (16.0 / 75.0) * k2
            )
            k4 = h * f(
                x[i] + (2.0 / 3.0) * h,
                y1[i] + (5.0 / 6.0) * k1 - (8.0 / 3.0) * k2 + (5.0 / 2.0) * k3,
            )
            k5 = h * f(
                x[i] + (4.0 / 5.0) * h,
                y1[i]
                - (8.0 / 5.0) * k1
                + (144.0 / 25.0) * k2
                - 4.0 * k3
                + (16.0 / 25.0) * k4,
            )
            k6 = h * f(
                x[i] + h,
                y1[i]
                + (361.0 / 320.0) * k1
                - (18.0 / 57.0) * k2
                + (407.0 / 128.0) * k3
                - (11.0 / 80.0) * k4
                + (55.0 / 128.0) * k5,
            )
            # --------------------------------------------------------
            k7 = h * f(
                x[i],
                y1[i]
                - (11.0 / 640.0) * k1
                + (11.0 / 256.0) * k3
                - (11.0 / 160.0) * k4
                + (11.0 / 256.0) * k5,
            )
            k8 = h * f(
                x[i] + h,
                y1[i]
                + (93.0 / 640.0) * k1
                - (18.0 / 5.0) * k2
                + (803.0 / 256.0) * k3
                - (11.0 / 160.0) * k4
                + (99.0 / 256.0) * k5
                + k7,
            )

            x.append(x[i] + h)
            # y1.append(y1[i] + ((31.0 / 384.0) * k1 + (1125.0 / 2816.0) * k3 + (9.0 / 32.0) * k4 + (125.0 / 768.0) * k5
            #                   + (5.0 / 66.0) * k6))
            y1.append(
                y1[i]
                + (
                    (7.0 / 1408.0) * k1
                    + (1125.0 / 2816.0) * k3
                    + (9.0 / 32.0) * k4
                    + (125.0 / 768.0) * k5
                    + (5.0 / 66.0) * k7
                    + (5.0 / 66.0) * k8
                )
            )

    def fehlbergrungekutta6(self, f, x, y1, n, h):
        """Fehlberg-Runge-Kutta order 6, source: [5] in in bibliography"""
        for i in range(n):
            k1 = h * f(x[i], y1[i])
            k2 = h * f(x[i] + (2.0 / 33.0) * h, y1[i] + (2.0 / 33.0) * k1)
            k3 = h * f(x[i] + (4.0 / 33.0) * h, y1[i] + (4.0 / 33.0) * k2)
            k4 = h * f(
                x[i] + (2.0 / 11.0) * h, y1[i] + (1.0 / 22.0) * k1 + (3.0 / 22.0) * k3
            )
            k5 = h * f(
                x[i] + (1.0 / 2.0) * h,
                y1[i] + (43.0 / 64.0) * k1 - (165.0 / 64.0) * k3 + (77.0 / 32.0) * k4,
            )
            k6 = h * f(
                x[i] + (2.0 / 3.0) * h,
                y1[i]
                - (2383.0 / 486.0) * k1
                + (1067.0 / 54.0) * k3
                - (26312.0 / 1701.0) * k4
                + (2176.0 / 1701.0) * k5,
            )
            k7 = h * f(
                x[i] + (6.0 / 7.0) * h,
                y1[i]
                + (10077.0 / 4802.0) * k1
                - (5643.0 / 686.0) * k3
                + (116259.0 / 16807.0) * k4
                - (6240.0 / 16807.0) * k5
                + (1053.0 / 2401.0) * k6,
            )
            k8 = h * f(
                x[i] + h,
                y1[i]
                - (733.0 / 176.0) * k1
                + (141.0 / 8.0) * k3
                - (335763.0 / 23296.0) * k4
                + (216.0 / 77.0) * k5
                - (4617.0 / 2816.0) * k6
                + (7203.0 / 9152.0) * k7,
            )
            # ------------------------------------------------
            k9 = h * f(
                x[i],
                y1[i]
                + (15.0 / 352.0) * k1
                - (5445.0 / 46592.0) * k4
                + (18.0 / 77.0) * k5
                - (1215.0 / 5632.0) * k6
                + (1029.0 / 18304.0) * k7,
            )
            k10 = h * f(
                x[i] + h,
                y1[i]
                - (1833.0 / 352.0) * k1
                + (141.0 / 8.0) * k3
                - (51237.0 / 3584.0) * k4
                + (18.0 / 7.0) * k5
                - (729.0 / 512.0) * k6
                + (1029.0 / 1408.0) * k7
                + k9,
            )

            x.append(x[i] + h)
            # y1.append(y1[i] + ((77.0 / 1440.0) * k1 + (1771561.0 / 6289920.0) * k4 + (32.0 / 105.0) * k5
            #                    + (243.0 / 2560.0) * k6 + (16807.0 / 74880.0) * k7 + (11.0 / 270.0) * k8))
            y1.append(
                y1[i]
                + (
                    (11.0 / 864.0) * k1
                    + (1771561.0 / 6289920.0) * k4
                    + (32.0 / 105.0) * k5
                    + (243.0 / 2560.0) * k6
                    + (16807.0 / 74880.0) * k7
                    + (11.0 / 270.0) * k9
                    + (11.0 / 270.0) * k10
                )
            )

    def fehlbergrungekutta7(self, f, x, y1, n, h):
        """Fehlberg-Runge-Kutta order 7, source: [5] in in bibliography"""
        for i in range(n):
            k1 = h * f(x[i], y1[i])
            k2 = h * f(x[i] + (2.0 / 27.0) * h, y1[i] + (2.0 / 27.0) * k1)
            k3 = h * f(
                x[i] + (1.0 / 9.0) * h, y1[i] + (1.0 / 36.0) * k1 + (1.0 / 12.0) * k2
            )
            k4 = h * f(
                x[i] + (1.0 / 6.0) * h, y1[i] + (1.0 / 24.0) * k1 + (1.0 / 8.0) * k3
            )
            k5 = h * f(
                x[i] + (5.0 / 12.0) * h,
                y1[i] + (5.0 / 12.0) * k1 - (25.0 / 16.0) * k3 + (25.0 / 16.0) * k4,
            )
            k6 = h * f(
                x[i] + (1.0 / 2.0) * h,
                y1[i] + (1.0 / 20.0) * k1 + (1.0 / 4.0) * k4 + (1.0 / 5.0) * k5,
            )
            k7 = h * f(
                x[i] + (5.0 / 6.0) * h,
                y1[i]
                - (25.0 / 108.0) * k1
                + (125.0 / 108.0) * k4
                - (65.0 / 27.0) * k5
                + (125.0 / 54.0) * k6,
            )
            k8 = h * f(
                x[i] + (1.0 / 6.0) * h,
                y1[i]
                + (31.0 / 300.0) * k1
                + (61.0 / 225.0) * k5
                - (2.0 / 9.0) * k6
                + (13.0 / 900.0) * k7,
            )
            k9 = h * f(
                x[i] + (2.0 / 3.0) * h,
                y1[i]
                + 2.0 * k1
                - (53.0 / 6.0) * k4
                + (704.0 / 45.0) * k5
                - (107.0 / 9.0) * k6
                + (67.0 / 90.0) * k7
                + 3.0 * k8,
            )
            k10 = h * f(
                x[i] + (1.0 / 3.0) * h,
                y1[i]
                - (91.0 / 108.0) * k1
                + (23.0 / 108.0) * k4
                - (976.0 / 135.0) * k5
                + (311.0 / 54.0) * k6
                - (19.0 / 60.0) * k7
                + (17.0 / 6.0) * k8
                - (1.0 / 12.0) * k9,
            )
            k11 = h * f(
                x[i] + h,
                y1[i]
                + (2383.0 / 4100.0) * k1
                - (341.0 / 164.0) * k4
                + (4496.0 / 1025.0) * k5
                - (301.0 / 82.0) * k6
                + (2133.0 / 4100.0) * k7
                + (45.0 / 82.0) * k8
                + (45.0 / 164.0) * k9
                + (18.0 / 41.0) * k10,
            )
            # ------------------------------------------------
            k12 = h * f(
                x[i],
                y1[i]
                + (3.0 / 205.0) * k1
                - (6.0 / 41.0) * k6
                - (3.0 / 205.0) * k7
                - (3.0 / 41.0) * k8
                + (3.0 / 41.0) * k9
                + (6.0 / 41.0) * k10,
            )
            k13 = h * f(
                x[i] + h,
                y1[i]
                - (1777.0 / 4100.0) * k1
                - (341.0 / 164.0) * k4
                + (4496.0 / 1025.0) * k5
                - (289.0 / 82.0) * k6
                + (2193.0 / 4100.0) * k7
                + (51.0 / 82.0) * k8
                + (33.0 / 164.0) * k9
                + (12.0 / 41.0) * k10
                + k12,
            )

            x.append(x[i] + h)
            # y1.append(y1[i] + ((41.0 / 840.0) * k1 + (34.0 / 105.0) * k6 + (9.0 / 35.0) * k7 + (9.0 / 35.0) * k8
            #                    + (9.0 / 280.0) * k9 + (9.0 / 280.0) * k10 + (41.0 / 840.0) * k11))
            y1.append(
                y1[i]
                + (
                    (34.0 / 105.0) * k6
                    + (9.0 / 35.0) * k7
                    + (9.0 / 35.0) * k8
                    + (9.0 / 280.0) * k9
                    + (9.0 / 280.0) * k10
                    + (41.0 / 840.0) * k12
                    + (41.0 / 840.0) * k13
                )
            )

    def fehlbergrungekutta8(self, f, x, y1, n, h):
        """Fehlberg-Runge-Kutta order 8, source: [5] in in bibliography"""

        # a_1 = 0
        a_2 = 0.44368940376498183109599404281370
        a_3 = 0.66553410564747274664399106422055
        a_4 = 0.99830115847120911996598659633083
        a_5 = 0.3155
        a_6 = 0.50544100948169068626516126737384
        a_7 = 0.17142857142857142857142857142857
        a_8 = 0.82857142857142857142857142857143
        a_9 = 0.66543966121011562534953769255586
        a_10 = 0.24878317968062652069722274560771
        a_11 = 0.109
        a_12 = 0.891
        a_13 = 0.3995
        a_14 = 0.6005
        a_15 = 1
        a_16 = 0
        a_17 = 1

        b_21 = 0.44368940376498183109599404281370
        b_31 = 0.16638352641186818666099776605514
        b_32 = 0.49915057923560455998299329816541
        b_41 = 0.24957528961780227999149664908271
        b_43 = 0.74872586885340683997448994724812
        b_51 = 0.20661891163400602426556710393185
        b_53 = 0.17707880377986347040380397288319
        b_54 = -0.68197715413869494669377076815048 * pow(10, -1)
        b_61 = 0.10927823152666408227903890926157
        b_64 = 0.40215962642367995421990563690087 * pow(10, -2)
        b_65 = 0.39214118169078980444392330174325
        b_71 = 0.98899281409164665304844765434355 * pow(10, -1)
        b_74 = 0.35138370227963966951204487356703 * pow(10, -2)
        b_75 = 0.12476099983160016621520625872489
        b_76 = -0.55745546834989799643742901466348 * pow(10, -1)
        b_81 = -0.36806865286242203724153101080691
        b_85 = -0.22273897469476007645024020944166 * pow(10, 1)
        b_86 = 0.13742908256702910729565691245744 * pow(10, 1)
        b_87 = 0.20497390027111603002159354092206 * pow(10, 1)
        b_91 = 0.45467962641347150077351950603349 * pow(10, -1)

        b_96 = 0.32542131701589147114677469648853
        b_97 = 0.28476660138527908888182420573687
        b_98 = 0.97837801675979152435868397271099 * pow(10, -2)
        b_101 = 0.60842071062622057051094145205182 * pow(10, -1)
        b_106 = -0.21184565744037007526325275251206 * pow(10, -1)
        b_107 = 0.19596557266170831957464490662983
        b_108 = -0.42742640364817603675144835342899 * pow(10, -2)
        b_109 = 0.17434365736814911965323452558189 * pow(10, -1)
        b_111 = 0.54059783296931917365785724111182 * pow(10, -1)
        b_117 = 0.11029325597828926530283127648228
        b_118 = -0.12565008520072556414147763782250 * pow(10, -2)
        b_119 = 0.36790043477581460136384043566339 * pow(10, -2)
        b_1110 = -0.57780542770972073040840628571866 * pow(10, -1)
        b_121 = 0.12732477063667114646645181799160
        b_128 = 0.11448805006396105323658875721817
        b_129 = 0.28773020709697992776202201849198
        b_1210 = 0.50945379459611363153735885079465
        b_1211 = -0.14799682244372575900242144449640




        for i in range(n):
            pass